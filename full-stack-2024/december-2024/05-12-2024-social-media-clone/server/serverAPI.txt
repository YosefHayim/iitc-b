LAST UPDATED:2024-12-02

SERVER API

HOW TO AUTHENTICATE REQUESTS:
OPTION 1: COOKIES - When logging in the request should specify the withCredentials property to be true
OPTION 2: HEADERS - Attach the jwt token as a jwtAuthorization header. The token should be received from
          the response to a successful login.

ROUTES

USERS
-add user /api/users/signup
ACCEPTS expects body: { displayName, username, password, email, role, imageUrl }
displayName: not unique
username: unique
password: not unique
email: unique
role: not unique
imageUrl: not unique
RETURNS an object with a confirmation message and the newly created user.

-log in /api/users/login
ACCEPTS expects body: { username, password }
RETURNS an object of the form { message:"user logged in successfully", token }

-get all users GET /api/users/
RETURNS an array of all users.
protected by jwt authentication.



POSTS (all routes are protected by jwt authentication)
-get all posts GET /api/posts/

-get post by id GET /api/posts/:id

-add post POST /api/posts/



COMMENTS (all routes are protected by jwt authentication)

-get all comments by post id GET /api/comments/:postId

-add a comment POST /api/comments/
ACCEPTS expects a request body of the form { parentPostId, content }
where parentPostId is the id of the post to which the comment will be added.

The add comment also needs the userId but it is received from the data attached to the request
by the authentication middleware.